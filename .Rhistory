head(cr)
summary(cr)
cr <- corr("/Users/benakiva/Dropbox/Coursera/R Programming/Week2/specdata", 400)
head(cr)
pollutantmean <- function(directory, pollutant, id = 1:332) {
# setwd(directory)
#    files <- list.files(path=directory, pattern="*.csv")
dat <- read.csv(getMonitor([id[1]], directory), header = TRUE)
if (length(id) > 1) {
index <- seq(id[2], id[length(id)])
for (i in index) {
dat <-rbind(dat, read.csv(getMonitor(i, directory), header = TRUE))
}
}
mean(dat[[pollutant]], na.rm=TRUE)
}
getmonitor <- function(id, directory, summarize = FALSE) {
fileStr <- paste(directory, "/", sprintf("%03d", as.numeric(id)), ".csv",
sep = "")
rawDfr <- read.csv(fileStr)
if (summarize) {
print(summary(rawDfr))
}
return(rawDfr)
}
pollutantmean("/Users/benakiva/Dropbox/Coursera/R Programming/Week2/specdata", "sulfate", 1:10)
pollutantmean <- function(directory, pollutant, id = 1:332) {
# setwd(directory)
#    files <- list.files(path=directory, pattern="*.csv")
dat <- read.csv(getMonitor([id[1]], directory), header = TRUE)
if (length(id) > 1) {
index <- seq(id[2], id[length(id)])
for (i in index) {
dat <-rbind(dat, read.csv(getMonitor(i, directory), header = TRUE))
}
}
mean(dat[[pollutant]], na.rm=TRUE)
}
getmonitor <- function(idx, directory, summarize = FALSE) {
fileStr <- paste(directory, "/", sprintf("%03d", as.numeric(idx)), ".csv",
sep = "")
rawDfr <- read.csv(fileStr)
if (summarize) {
print(summary(rawDfr))
}
return(rawDfr)
}
pollutantmean("/Users/benakiva/Dropbox/Coursera/R Programming/Week2/specdata", "sulfate", 1:10)
pollutantmean <- function(directory, pollutant, id = 1:332) {
# setwd(directory)
#    files <- list.files(path=directory, pattern="*.csv")
dat <- read.csv(getMonitor([id[1]], directory), header = TRUE)
if (length(id) > 1) {
index <- seq(id[2], id[length(id)])
for (i in index) {
dat <-rbind(dat, read.csv(getMonitor(i, directory), header = TRUE))
}
}
mean(dat[[pollutant]], na.rm=TRUE)
}
getMonitor <- function(idx, directory, summarize = FALSE) {
fileStr <- paste(directory, "/", sprintf("%03d", as.numeric(idx)), ".csv",
sep = "")
rawDfr <- read.csv(fileStr)
if (summarize) {
print(summary(rawDfr))
}
return(rawDfr)
}
pollutantmean <- function(directory, pollutant, id = 1:332) {
# setwd(directory)
#    files <- list.files(path=directory, pattern="*.csv")
dat <- read.csv(getMonitor(id[1], directory), header = TRUE)
if (length(id) > 1) {
index <- seq(id[2], id[length(id)])
for (i in index) {
dat <-rbind(dat, read.csv(getMonitor(i, directory), header = TRUE))
}
}
mean(dat[[pollutant]], na.rm=TRUE)
}
getMonitor <- function(idx, directory, summarize = FALSE) {
fileStr <- paste(directory, "/", sprintf("%03d", as.numeric(idx)), ".csv",
sep = "")
rawDfr <- read.csv(fileStr)
if (summarize) {
print(summary(rawDfr))
}
return(rawDfr)
}
pollutantmean("/Users/benakiva/Dropbox/Coursera/R Programming/Week2/specdata", "sulfate", 1:10)
pollutantmean("/Users/benakiva/Dropbox/Coursera/R Programming/Week2/specdata", "sulfate", 1:10)
pollutantmean <- function(directory, pollutant, id = 1:332) {
# setwd(directory)
#    files <- list.files(path=directory, pattern="*.csv")
dat <- getMonitor(id[1], directory)
if (length(id) > 1) {
index <- seq(id[2], id[length(id)])
for (i in index) {
dat <-rbind(dat, getMonitor(i, directory))
}
}
mean(dat[[pollutant]], na.rm=TRUE)
}
getMonitor <- function(idx, directory, summarize = FALSE) {
fileStr <- paste(directory, "/", sprintf("%03d", as.numeric(idx)), ".csv",
sep = "")
rawDfr <- read.csv(fileStr, header = TRUE)
if (summarize) {
print(summary(rawDfr))
}
return(rawDfr)
}
pollutantmean("/Users/benakiva/Dropbox/Coursera/R Programming/Week2/specdata", "sulfate", 1:10)
## This function creates a special "vector" containing a function to
## - set the value of the matrix
## - get the value of the matrix
## - set the value of the inverse
## - get the value of the inverse
makeCacheMatrix <- function(x = matrix()) {
# initialize the stored matrix inverse value to NULL
mtxInv <- NULL
set <- function(y) {
x <<- y
mtxInv <<- NULL
}
get <- function() x
setMatrixInverse <- function(inv) mtxInv <<- inv
getMatrixInverse <- function() mtxInv
list(set = set, get = get,
setMatrixInverse = setMatrixInverse,
getMatrixInverse = getMatrixInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
# check if the inverse is already cached
mtxInv <- x$getMatrixInverse()
# if the matrix inverse exits in the cache,
# we return it here
if(!is.null(mtxInv)) {
message("getting cached matrix inverse")
return(mtxInv)
}
# if the matrix inverse isn't in the cached,
# we get the matrix into data
data <- x$get()
# compute the matrix inverse
mtxInv <- solve(data, ...)
# set in to the cache the computed inverse
x$setMatrixInverse(mtxInv)
## Return a matrix that is the inverse of 'x'
mtxInv
}
B = matrix(c(2, 4, 3, 1, 5, 7), nrow=3, ncol=2)
B
cacheSolve(B)
makeCacheMatrix(B)
cacheSolve(B)
mtx <- makeCacheMatrix(matrix(c(1, 4, 4, 1), ncol=2))
mtx$get()
inv = cacheSolve(mtx)
inv
cacheSolve(mtx)
solve(mtx, ...)
solve(mtx)
mtx <- makeCacheMatrix(matrix(c(4, 2, 7, 6), ncol=2))
cacheSolve(mtx)
cacheSolve(mtx)
mtcars
|> Seq.groupBy (fun x -> x?cyl)
|> Seq.sortBy fst
|> Seq.map (fun (key, values) -> key, values |> Seq.averageBy (fun x -> x?mpg.AsFloat()))
//Continuing with the 'mtcars' dataset from Question 6, what is the absolute difference between the average horsepower of 4-cylinder cars and the average horsepower of 8-cylinder cars?
let avg4cyl = mtcars |> Seq.filter (fun x -> x?cyl = "4") |> Seq.averageBy (fun x -> x?hp.AsFloat())
let avg8cyl = mtcars |> Seq.filter (fun x -> x?cyl = "8") |> Seq.averageBy (fun x -> x?hp.AsFloat())
abs(avg4cyl - avg8cyl)
library(datasets)
data(mtcars)
mtcars
|> Seq.groupBy (fun x -> x?cyl)
|> Seq.sortBy fst
|> Seq.map (fun (key, values) -> key, values |> Seq.averageBy (fun x -> x?mpg.AsFloat()))
//Continuing with the 'mtcars' dataset from Question 6, what is the absolute difference between the average horsepower of 4-cylinder cars and the average horsepower of 8-cylinder cars?
let avg4cyl = mtcars |> Seq.filter (fun x -> x?cyl = "4") |> Seq.averageBy (fun x -> x?hp.AsFloat())
let avg8cyl = mtcars |> Seq.filter (fun x -> x?cyl = "8") |> Seq.averageBy (fun x -> x?hp.AsFloat())
abs(avg4cyl - avg8cyl)
avg4cyl <- split(mtcars, mtcars$cyl = 4)
mtcars[1,]
getOutcomes <- function(){
outcomes=c('heart attack','heart disease','pneumonia')
#build dictionary for column name and outcome
outcome_columns=c(11,17,23)
names(outcome_columns)=outcomes
return(outcome_columns)
}
getIdx <- function(outcome){
outcomes=getOutcomes()
#check if outcome is valid
if (!outcome %in% names(outcomes)){
stop("invalid outcome")}
idx=outcomes[outcome]
return(idx)
}
getData <- function(state){
## Read outcome data
##you should specify your own working directory
data=read.csv("outcome-of-care-measures.csv",colClasses="character")
## Check that state and outcome are valid
str_states <- data$State
if (!state %in% str_states){
stop("Invalid state")
}
return(data)
}
prepareData <- function(data){
#Prepare data
for(i in getOutcomes()){
data[,i] <- suppressWarnings(as.numeric(as.character(data[,i])))
}
data$State <- factor(data$State)
return(data)
}
cleanNA <- function(data){
# clean up NA
cc = complete.cases(data)
data = data[cc,]
return(data)
}
## If you want to source() a bunch of files, something like
## the following may be useful:
sourceDir <- function(path, trace = TRUE, ...) {
for (nm in list.files(path, pattern = "\\.[RrSsQq]$")) {
if(trace) cat(nm,":")
source(file.path(path, nm), ...)
if(trace) cat("\n")
}
}
source("./utils.R",local=TRUE)
best <- function(state, outcome) {
outcomes=getOutcomes()
## Read outcome data
data=getData(state)
#Prepare data
data=prepareData(data)
data = data[data$State == state,]
# clean up NA
data=cleanNA(data)
idx=getIdx(outcome)
t_data <- data[!is.na(data[,idx]),]
return(t_data[which.min(t_data[,idx]),2])
## Return hospital name in that state with lowest 30-day death
## rate
}
best("TX", "heart attack")
getOutcomes <- function(){
outcomes=c('heart attack','heart disease','pneumonia')
#build dictionary for column name and outcome
outcome_columns=c(11,17,23)
names(outcome_columns)=outcomes
return(outcome_columns)
}
getIdx <- function(outcome){
outcomes=getOutcomes()
#check if outcome is valid
if (!outcome %in% names(outcomes)){
stop("invalid outcome")}
idx=outcomes[outcome]
return(idx)
}
getData <- function(state){
## Read outcome data
##you should specify your own working directory
data=read.csv("/Users/benakiva/Dropbox/Coursera/R Programming/Week4/programming assignment/rprog-data-ProgAssignment3-data/outcome-of-care-measures.csv",colClasses="character")
## Check that state and outcome are valid
str_states <- data$State
if (!state %in% str_states){
stop("Invalid state")
}
return(data)
}
prepareData <- function(data){
#Prepare data
for(i in getOutcomes()){
data[,i] <- suppressWarnings(as.numeric(as.character(data[,i])))
}
data$State <- factor(data$State)
return(data)
}
cleanNA <- function(data){
# clean up NA
cc = complete.cases(data)
data = data[cc,]
return(data)
}
## If you want to source() a bunch of files, something like
## the following may be useful:
sourceDir <- function(path, trace = TRUE, ...) {
for (nm in list.files(path, pattern = "\\.[RrSsQq]$")) {
if(trace) cat(nm,":")
source(file.path(path, nm), ...)
if(trace) cat("\n")
}
}
source("./utils.R",local=TRUE)
best <- function(state, outcome) {
outcomes=getOutcomes()
## Read outcome data
data=getData(state)
#Prepare data
data=prepareData(data)
data = data[data$State == state,]
# clean up NA
data=cleanNA(data)
idx=getIdx(outcome)
t_data <- data[!is.na(data[,idx]),]
return(t_data[which.min(t_data[,idx]),2])
## Return hospital name in that state with lowest 30-day death
## rate
}
best("TX", "heart attack")
best("TX", "heart failure")
best("MD", "heart attack")
getOutcomes <- function(){
outcomes=c('heart attack','heart failure','pneumonia')
#build dictionary for column name and outcome
outcome_columns=c(11,17,23)
names(outcome_columns)=outcomes
return(outcome_columns)
}
getIdx <- function(outcome){
outcomes=getOutcomes()
#check if outcome is valid
if (!outcome %in% names(outcomes)){
stop("invalid outcome")}
idx=outcomes[outcome]
return(idx)
}
getData <- function(state){
## Read outcome data
##you should specify your own working directory
data=read.csv("/Users/benakiva/Dropbox/Coursera/R Programming/Week4/programming assignment/rprog-data-ProgAssignment3-data/outcome-of-care-measures.csv",colClasses="character")
## Check that state and outcome are valid
str_states <- data$State
if (!state %in% str_states){
stop("Invalid state")
}
return(data)
}
prepareData <- function(data){
#Prepare data
for(i in getOutcomes()){
data[,i] <- suppressWarnings(as.numeric(as.character(data[,i])))
}
data$State <- factor(data$State)
return(data)
}
cleanNA <- function(data){
# clean up NA
cc = complete.cases(data)
data = data[cc,]
return(data)
}
## If you want to source() a bunch of files, something like
## the following may be useful:
sourceDir <- function(path, trace = TRUE, ...) {
for (nm in list.files(path, pattern = "\\.[RrSsQq]$")) {
if(trace) cat(nm,":")
source(file.path(path, nm), ...)
if(trace) cat("\n")
}
}
source("./utils.R",local=TRUE)
best <- function(state, outcome) {
outcomes=getOutcomes()
## Read outcome data
data=getData(state)
#Prepare data
data=prepareData(data)
data = data[data$State == state,]
# clean up NA
data=cleanNA(data)
idx=getIdx(outcome)
t_data <- data[!is.na(data[,idx]),]
return(t_data[which.min(t_data[,idx]),2])
## Return hospital name in that state with lowest 30-day death
## rate
}
best("TX", "heart failure")
best("TX", "heart attack")
best("MD", "heart attack")
best("MD", "pneumonia")
## This function creates a special "vector" containing a function to
## - set the value of the matrix
## - get the value of the matrix
## - set the value of the inverse
## - get the value of the inverse
makeCacheMatrix <- function(x = matrix()) {
# initialize the stored matrix inverse value to NULL
mtxInv <- NULL
set <- function(y) {
x <<- y
mtxInv <<- NULL
}
get <- function() x
setMatrixInverse <- function(inv) mtxInv <<- inv
getMatrixInverse <- function() mtxInv
list(set = set, get = get,
setMatrixInverse = setMatrixInverse,
getMatrixInverse = getMatrixInverse)
}
## This function retrieves the matrix inverse value
## from the cache if it exits. In case the inverse of
## a matrix does not exist in the cache, the function
## calculates it and store the result in the cache and
## returns the value calculated.
cacheSolve <- function(x, ...) {
# check if the inverse is already cached
mtxInv <- x$getMatrixInverse()
# if the matrix inverse exits in the cache,
# we return it here
if(!is.null(mtxInv)) {
message("getting cached matrix inverse")
return(mtxInv)
}
# if the matrix inverse isn't in the cached,
# we get the matrix into data
message("matrix inverse not in the cache. Computing it...")
data <- x$get()
# compute the matrix inverse
mtxInv <- solve(data, ...)
# set in to the cache the computed inverse
x$setMatrixInverse(mtxInv)
## Return a matrix that is the inverse of 'x'
mtxInv
}
cacheMatrix <- makeCacheMatrix(matrix(1:4,2,2,4))
cacheMatrix$Get()
cacheMatrix$get()
inverseMatrix <- cacheSolve(cacheMatrix)
inverseMatrix
ls()
df = read.table("./household_power_consumption.txt", header=T, sep=';')
newData1 <- as.character(df$Date)
df$newdate <- strptime(newData1, "%d/%m/%Y")
df$Date <- df$newdate
dat4 <- df[df$Date >= as.POSIXlt("2007-02-01") & df$Date < as.POSIXlt("2007-02-02"),]
png("./plot1.png", width = 480, height = 480)
hist(as.numeric(as.character(dat4$Global_active_power)), col = "red",
main = "Global Active Power",
xlab = "Global Active Power (kilowatts)")
dev.off()
library("httr")
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
#    Insert your values below - if secret is omitted, it will look it up in
#    the GITHUB_CONSUMER_SECRET environmental variable.
#
#    Use http://localhost:1410 as the callback url
myapp <- oauth_app("RGitHub", "cb85aa17df80adc6fe4a", "bff9d09356d49dda596fc5b7d86e6c4ef2bad8d8")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library("httr")
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
#    Insert your values below - if secret is omitted, it will look it up in
#    the GITHUB_CONSUMER_SECRET environmental variable.
#
#    Use http://localhost:1410 as the callback url
myapp <- oauth_app("RGitHub", "cb85aa17df80adc6fe4a", "bff9d09356d49dda596fc5b7d86e6c4ef2bad8d8")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
stop_for_status(req)
content(req)
library("httr")
oauth_endpoints("github")
myapp <- oauth_app("RGitHub", "cb85aa17df80adc6fe4a", "bff9d09356d49dda596fc5b7d86e6c4ef2bad8d8")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httpuv)
library("httpuv"")
library("httpuv")
library("httr")
library("httpuv")
library("jsonlite")
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
#    Insert your values below - if secret is omitted, it will look it up in
#    the GITHUB_CONSUMER_SECRET environmental variable.
#
#    Use http://localhost:1410 as the callback url
myapp <- oauth_app("RGitHub", "cb85aa17df80adc6fe4a", "bff9d09356d49dda596fc5b7d86e6c4ef2bad8d8")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
stop_for_status(req)
content(req)
library(sqldf)
?numcolwise
?ddply
install.packages("plyr")
?ddply
install.packages("dplyr")
setwd("~/Dropbox (Personal)/Coursera/Reproducible Research/Week2/peer_assessment1/RepData_PeerAssessment1")
nrow(activity_data[!complete.cases(activity_data), ])
